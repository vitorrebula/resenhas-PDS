{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang22\tab A arquitetura de microservices descreve uma maneira de abordar a constru\'e7\'e3o do software de forma modular, ou seja, cada servi\'e7o ser\'e1 independente dentro de seu escopo, em torno de uma capacidade de neg\'f3cio, podendo ter, em uma mesma aplica\'e7\'e3o, diferentes servi\'e7os em diferentes linguagens e tecnologias de armazenamento. Dessa forma, ainda que a maioria dos sistemas empresariais sejam desenvolvidas no modelo monol\'edtico, indo contra a ideia de microservi\'e7os, tal abordagem traz diversos desafios, como a recompila\'e7\'e3o e redeploy para qualquer mudan\'e7a, a dificuldade de manter-se a modularidade, sendo dif\'edcil isolar altera\'e7\'f5es, e a incapacidade de escalar uma parte espec\'edfica do sistema, tendo que levar a aplica\'e7\'e3o como um todo junto.\par
\tab Assim sendo, ainda que n\'e3o exista uma defini\'e7\'e3o concreta do que seja a arquitetura de microservi\'e7os, algumas caracter\'edsticas s\'e3o frequentemente observada nesses sistemas, mesmo que n\'e3o sejam presentes em todas, est\'e1 contida na maioria, sendo elas: \line\tab - Componentiza\'e7\'e3o por Servi\'e7os: \par
\tab\tab A ind\'fastria de software sempre teve o anseio por construir sistemas a partir \tab\tab de c\'f3digos e componentes reutiliz\'e1veis, e isso est\'e1 presente na arquitetura \tab\tab de microservi\'e7os, onde temos bibliotecas e servi\'e7os, tendo interfaces \tab\tab\tab expl\'edcitas de implementa\'e7\'e3o, evitando depend\'eancias excessivas entre \tab\tab\tab componentes, e valorizando o ponto principal de independ\'eancia e efici\'eancia \tab\tab de cada servi\'e7o.\par
\tab - Organiza\'e7\'e3o por capacidades de neg\'f3cio: \par
\tab\tab\'c9 muito comum no mercado de tecnologia dividirem as equipes por \tab\tab\tab camadas de tecnologia, como o time de design, back-end, front-end, infra e \tab\tab relacionados, por\'e9m essa estrat\'e9gia pode gerar inefici\'eancia, pois at\'e9 as \tab\tab\tab mudan\'e7as mais simples exigem a colabora\'e7\'e3o de m\'faltiplos times, tornando \tab\tab o processo de desenvolvimento mais lento. Dessa forma, a arquitetura \tab\tab\tab prop\'f5e uma divis\'e3o em capacidades de neg\'f3cio, onde cada servi\'e7o cobre \tab\tab um dom\'ednio espec\'edfico da empresa, e a equipe inclui tudo que precisa, \tab\tab\tab combinando pessoas de diferentes \'e1reas, para lidar com aquele servi\'e7o.\par
\tab Al\'e9m da diferen\'e7a organizacional, a vis\'e3o sobre o que est\'e1 sendo desenvolvido \'e9 diferente do tradicional, onde o software \'e9 um projeto que "termina ap\'f3s a entrega", abordando um time respons\'e1vel pelo software durante a sua vida \'fatil, tendo um sistema iterativo e incremental.\par
\tab Esse modelo de desenvolvimento traz consigo a cultura do "You build it, you run it", onde as equipes que desenvolvem um servi\'e7o tamb\'e9m s\'e3o respons\'e1veis por sua opera\'e7\'e3o e manuten\'e7\'e3o. Isso evita o problema recorrente da separa\'e7\'e3o entre times de desenvolvimento e suporte, garantindo que quem constr\'f3i o sistema tenha total conhecimento sobre ele e possa resolver falhas mais rapidamente.\par
\tab Outro ponto fundamental na arquitetura de microservices \'e9 a governan\'e7a descentralizada. Diferente dos sistemas monol\'edticos tradicionais, onde h\'e1 um controle r\'edgido sobre padr\'f5es tecnol\'f3gicos, microservices permitem que cada equipe escolha a tecnologia mais adequada para seu servi\'e7o. Essa liberdade, no entanto, n\'e3o significa falta de organiza\'e7\'e3o: boas pr\'e1ticas como a reutiliza\'e7\'e3o de bibliotecas internas e a defini\'e7\'e3o de contratos de servi\'e7o garantem que os sistemas continuem interoper\'e1veis e f\'e1ceis de manter.\par
\tab Ainda, como os microservices permitem o uso de diferentes tecnologias dentro da mesma aplica\'e7\'e3o, \'e9 essencial adotar estrat\'e9gias para manter a compatibilidade entre servi\'e7os. T\'e9cnicas como Tolerant Reader e Consumer-Driven Contracts ajudam a garantir que os sistemas possam evoluir sem quebrar integra\'e7\'f5es existentes, permitindo mudan\'e7as graduais e mais seguras.\par
\tab Por fim, a ado\'e7\'e3o de microservices exige um modelo de monitoramento e automa\'e7\'e3o robusto. Como cada servi\'e7o \'e9 independente e pode estar rodando em diferentes ambientes, ferramentas de observabilidade, logging e deploy cont\'ednuo s\'e3o fundamentais para garantir estabilidade e rastreamento eficiente de erros. Empresas como Netflix e Amazon utilizam essas pr\'e1ticas para manter seus servi\'e7os altamente dispon\'edveis e resilientes.\par
\tab Dessa forma, a arquitetura de microservices n\'e3o \'e9 apenas uma quest\'e3o t\'e9cnica, mas tamb\'e9m organizacional. Para funcionar bem, ela precisa de times capacitados e processos bem definidos, garantindo que a flexibilidade e escalabilidade prometidas realmente se traduzam em benef\'edcios concretos para o neg\'f3cio.\par
\tab Al\'e9m disso, a descentraliza\'e7\'e3o da gest\'e3o de dados nos microservices impacta diretamente na maneira como as empresas lidam com a seguran\'e7a e conformidade dos dados. Em um modelo monol\'edtico, a aplica\'e7\'e3o geralmente conta com uma \'fanica camada de controle de acesso e auditoria centralizada, facilitando a aplica\'e7\'e3o de pol\'edticas de seguran\'e7a. No entanto, em uma arquitetura de microservices, cada servi\'e7o pode ter seu pr\'f3prio mecanismo de autentica\'e7\'e3o, autoriza\'e7\'e3o e registro de atividades, o que pode levar a desafios na implementa\'e7\'e3o de conformidade regulat\'f3ria, como GDPR ou LGPD. Para lidar com isso, as empresas precisam adotar abordagens padronizadas, como autentica\'e7\'e3o federada via OpenID Connect, al\'e9m de estrat\'e9gias centralizadas de monitoramento e rastreamento para garantir que os servi\'e7os sigam as diretrizes de seguran\'e7a exigidas.\par
\tab Outro ponto relevante \'e9 o impacto da descentraliza\'e7\'e3o no desempenho e escalabilidade do sistema. Quando cada microservice gerencia seu pr\'f3prio armazenamento de dados, \'e9 poss\'edvel otimizar a tecnologia de banco de dados para atender melhor \'e0s necessidades espec\'edficas do servi\'e7o, permitindo escolhas como bancos NoSQL para alta escalabilidade ou bancos relacionais para integridade transacional. No entanto, essa flexibilidade tamb\'e9m aumenta a complexidade operacional, exigindo solu\'e7\'f5es eficientes para gerenciamento de cache distribu\'eddo, replica\'e7\'e3o de dados e balanceamento de carga. Estrat\'e9gias como Event Sourcing e CQRS (Command Query Responsibility Segregation) s\'e3o frequentemente adotadas para lidar com esses desafios, garantindo que as opera\'e7\'f5es de leitura e escrita possam ser otimizadas sem comprometer a integridade ou a consist\'eancia dos dados entre os servi\'e7os.\par
\tab A automa\'e7\'e3o de infraestrutura evoluiu significativamente nos \'faltimos anos, especialmente com o crescimento da computa\'e7\'e3o em nuvem e da AWS, reduzindo a complexidade operacional no desenvolvimento e opera\'e7\'e3o de microservi\'e7os. Equipes experientes em Continuous Delivery e Continuous Integration fazem amplo uso de automa\'e7\'e3o de infraestrutura, garantindo testes automatizados e implanta\'e7\'e3o cont\'ednua para cada ambiente, conforme ilustrado na pipeline de build.\par
\tab A automa\'e7\'e3o facilita a ado\'e7\'e3o de boas pr\'e1ticas, resultando em ferramentas \'fateis para desenvolvedores e equipes de opera\'e7\'f5es, como a cria\'e7\'e3o de artefatos e gerenciamento de c\'f3digo. Exemplos incluem as ferramentas open-source da Netflix e o Dropwizard. Uma vez que a automa\'e7\'e3o da entrega est\'e1 bem estabelecida para um mon\'f3lito, implantar m\'faltiplas aplica\'e7\'f5es se torna uma tarefa simples e previs\'edvel, alinhada ao objetivo do Continuous Delivery de tornar o deployment um processo "entediante".\par
\tab No entanto, operar microservi\'e7os em produ\'e7\'e3o pode ser significativamente diferente de um mon\'f3lito, exigindo uma abordagem mais sofisticada para monitoramento, resili\'eancia e gerenciamento de falhas.\par
\tab Aplica\'e7\'f5es baseadas em microservi\'e7os devem ser projetadas para tolerar falhas, pois qualquer chamada a um servi\'e7o pode n\'e3o responder. Estrat\'e9gias como o uso do Simian Army da Netflix ajudam a testar a resili\'eancia das aplica\'e7\'f5es.\par
\tab Padr\'f5es como Circuit Breaker, Bulkhead e Timeout s\'e3o fundamentais para evitar falhas em cascata. A Netflix utiliza esses padr\'f5es para garantir a estabilidade dos seus sistemas. Monitoramento em tempo real \'e9 essencial para detectar falhas rapidamente e restaurar o servi\'e7o automaticamente, acompanhando m\'e9tricas t\'e9cnicas e de neg\'f3cio para identificar problemas emergentes.\par
\tab Chamadas s\'edncronas entre servi\'e7os podem amplificar o impacto do downtime. Algumas empresas limitam essas chamadas por requisi\'e7\'e3o, enquanto outras adotam designs ass\'edncronos para melhorar a resili\'eancia.\par
\tab A transpar\'eancia no monitoramento de microservi\'e7os \'e9 crucial, com dashboards detalhados mostrando status, throughput, lat\'eancia e outros indicadores operacionais. Equipes que adotam microservi\'e7os geralmente v\'eam de um hist\'f3rico de design evolutivo, permitindo mudan\'e7as r\'e1pidas e controladas sem desacelerar o desenvolvimento.\par
\tab A modularidade orientada \'e0 mudan\'e7a \'e9 essencial para definir a divis\'e3o de servi\'e7os, garantindo que componentes frequentemente alterados juntos permane\'e7am no mesmo m\'f3dulo. A abordagem do Guardian demonstra uma transi\'e7\'e3o gradual do mon\'f3lito para microservi\'e7os, onde novos recursos s\'e3o desenvolvidos separadamente e consomem a API do mon\'f3lito.\par
\tab A granularidade dos microservi\'e7os permite liberar mudan\'e7as rapidamente sem a necessidade de um deploy completo da aplica\'e7\'e3o, embora isso exija aten\'e7\'e3o para evitar que altera\'e7\'f5es quebrem depend\'eancias. Em vez de versionamento rigoroso, a prefer\'eancia na arquitetura de microservi\'e7os \'e9 projetar servi\'e7os que sejam tolerantes a mudan\'e7as nos seus fornecedores, minimizando impactos na integra\'e7\'e3o.\par
}
 